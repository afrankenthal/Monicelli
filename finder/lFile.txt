#include "mainwindow.h"
#include "ui_mainwindow.h"
//==================================================================
MainWindow::MainWindow (QWidget *parent   ) :
            QMainWindow(parent            ) ,
            ui_        (new Ui::MainWindow)
{
    ui_ ->setupUi      (this              ) ;

    char* homedddddPath = getenv ("HOME"  );
    HOME_          = QString(homePath);
    qsettingPath_  = HOME_ + QString("/.config/finder/");

    this->initializeStringFinder() ;

    cout << __LINE__ << "] " << endl ;
    this->initializeCompareFiles() ;
}

//==================================================================
MainWindow::~MainWindow()
{
    delete ui_;
    
    
    
}

//==================================================================
void MainWindow::initializeCompareFiles(void)
{
    delete ui_;
    QString rootPath = "/Users/menasce/AnalysisTBF/" ;
    QDir    sourceDir(rootPath) ;
//    fileModel_["left" ] = new QFileSystemModel() ;
//    fileModel_["right"] = new QFileSystemModel() ;

//    model_["left"]->setRootPath(rootPath);

    QFileSystemModel *model = new QFileSystemModel;
    model->setRootPath(rootPath);
    ui_->lDirTV->setModel(model);
    ui_->rDirTV->setModel(model);
    ui_->lDirTV->header()->resizeSection(0,300);
    ui_->rDirTV->header()->resizeSection(0,300);
    ui_->lDirTV->setExpanded           (model->index(rootPath), true) ;
    ui_->rDirTV->setExpanded         (model->index(rootPath), true) ;
    ui_->lDirTV->setCurrentIndex   (model->index(rootPath)      ) ;
    ui_->rDirTV->setCurrentIndex(model->index(rootPath)      ) ;

    connect(ui_->lDirTV, SIGNAL(activated(const QModelIndex &))  ,
            this,        SLOT  (selectL  (const QModelIndex &))) ;
    connect(ui_->rDirTV, SIGNAL(activated(const QModelIndex &))  ,
            this,        SLOT  (selectR  (const QModelIndex &))) ;

    statusBar()->showMessage(tr("View populated"));

    QString       lFileName   = "/Users/menasce/AnalysisTBF/Monicelli/finder/lFile.txt" ;
    QString       rFileName   = "/Users/menasce/AnalysisTBF/Monicelli/finder/rFile.txt" ;

    QProcess    * diffProcess = new QProcess();
    QString       command     = "diff"        ;
    QStringList   arguments                   ;

    arguments << "-t" << "-y" << "-W" << "270" << lFileName << rFileName ;
    diffProcess->start(command,arguments) ;
    diffProcess->waitForReadyRead(3000)   ;

    QByteArray  result = diffProcess->readAllStandardOutput();
    QByteArray  error  = diffProcess->readAllStandardError ();
    quint32     offset = 134                                 ;
    QStringList all    = QString(result.data()).split('\n')  ;
    for(unsigned int i=0; i<all.size(); ++i)
    {
        QString t = all.at(i) ;
        if( t.size() == 0 )
        {
            ui_->lPanelTE->insertHtml(QString(""));
            ui_->rPanelTE->insertHtml(QString(""));
            continue ;
        }
        QString l = t.mid(0     ,         offset    );
        QString c = t.mid(offset,         1         );
        QString r = t.mid(offset+3,t.size()-offset-3);
        l         = l.replace(QString("<"), QString("&lt;"));
        l         = l.replace(QString(">"), QString("&gt;"));
        r         = r.replace(QString("<"), QString("&lt;"));
        r         = r.replace(QString(">"), QString("&gt;"));

        if(      c == QString("|") )
        {
            l = QString("<pre><font color=\"red\" wheight=\"bold\">"   ) + l + QString("</font><br>") ;
            r = QString("<pre><font color=\"red\" wheight=\"bold\">"   ) + r + QString("</font><br>") ;
            ui_->lPanelTE->insertHtml(l);
            ui_->rPanelTE->insertHtml(r);
            continue ;
        }
        else if( c == QString("<") )
        {
            l = QString("<pre><font color=\"yellow\" wheight=\"bold\">") + l + QString("</font><br>") ;
            r = QString("<pre><font color=\"cyan\" wheight=\"bold\">"  ) + r + QString("</font><br>") ;
            ui_->lPanelTE->insertHtml(l);
            ui_->rPanelTE->insertHtml(r);
            continue ;
        }
        else if( c == QString(">") )
        {
            l = QString("<pre><font color=\"cyan\" wheight=\"bold\">"  ) + l + QString("</font><br>") ;
            r = QString("<pre><font color=\"yellow\" wheight=\"bold\">") + r + QString("</font><br>") ;
            ui_->lPanelTE->insertHtml(l);
            ui_->rPanelTE->insertHtml(r);
            continue ;
        }
        else
        {
            l = QString("<pre><font wheight=\"bold\">") + l + QString("</font><br>") ;
            r = QString("<pre><font wheight=\"bold\">") + r + QString("</font><br>") ;
            ui_->lPanelTE->insertHtml(l);
            ui_->rPanelTE->insertHtml(r);
        }
    }
    this->on_synchronizeCB_clicked(true) ;
    ui_->lPanelTE->moveCursor (QTextCursor::Start) ;
    ui_->rPanelTE->moveCursor (QTextCursor::Start) ;
}

//==================================================================
void MainWindow::closeEvent(QCloseEvent */*event*/)
{

    QString   selectedPaths = this->getSelectedPaths()        ;
    QString   lastSettings  = ui_ ->settingsCB->currentText() ;
    QString   settingsList  = ""                              ;

    if( ! lastSettings.contains(QRegularExpression("\\w+")) )
    {
        ui_->settingsCB->insertItem(0,QString("default"),QVariant(QString("default")));
    }

    for(int i=0; i<ui_->settingsCB->count(); ++i)
    {
        settingsList += ui_->settingsCB->itemData(i).toString() + QString(" ") ;
    }

    cout << __LINE__ << " ] [finder] all settings to save: |" << settingsList.toStdString() << "|" << endl ;

    QSettings allSettings(qsettingPath_+QString("allSettings.txt"), QSettings::NativeFormat);
    allSettings.setValue("settingsList",settingsList);
    allSettings.setValue("lastSettings",lastSettings);

    QSettings chosenSettings(qsettingPath_+lastSettings+QString(".txt"), QSettings::NativeFormat);
//    QSettings settings("INFN-Settings", lastSettings);

    cout << __LINE__ << " ] [finder] saving under   : " << (qsettingPath_+lastSettings+QString(".txt")).toStdString() << endl ;
    cout << __LINE__ << " ] [finder] saving rootPath: " << rootPath_.toStdString()     << endl ;
    cout << __LINE__ << " ] [finder] "                  << selectedPaths.toStdString() << endl ;

    chosenSettings.setValue("rootPath"              , rootPath_                                   ) ;
    chosenSettings.setValue("selectedPaths"         , selectedPaths                               ) ;
    chosenSettings.setValue("matchPaths"            , ui_->matchPathsTE            ->toPlainText()) ;
    chosenSettings.setValue("searchStrings"         , ui_->searchStringsTE         ->toPlainText()) ;
    chosenSettings.setValue("excludePaths"          , ui_->excludePathsTE          ->toPlainText()) ;
    chosenSettings.setValue("suffixes"              , ui_->suffixesTE              ->toPlainText()) ;
    chosenSettings.setValue("searchStringsLogic"    , ui_->searchStringsLogicCB    ->currentText()) ;
    chosenSettings.setValue("caseSensitiveString"   , ui_->caseSensitiveStringCB   ->isChecked()  ) ;
    chosenSettings.setValue("excludeStringsLogic"   , ui_->excludeStringsLogicCB   ->currentText()) ;
    chosenSettings.setValue("excludeStringsTE"      , ui_->excludeStringsTE        ->toPlainText()) ;
    chosenSettings.setValue("caseSensitiveEString"  , ui_->caseSensitiveEStringCB  ->isChecked()  ) ;
    chosenSettings.setValue("matchPathsLogic"       , ui_->matchPathsLogicCB       ->currentText()) ;
    chosenSettings.setValue("caseSensitiveMatch"    , ui_->caseSensitiveMatchCB    ->isChecked()  ) ;
    chosenSettings.setValue("excludePathsLogic"     , ui_->excludePathsLogicCB     ->currentText()) ;
    chosenSettings.setValue("caseSensitiveExclusion", ui_->caseSensitiveExclusionCB->isChecked()  ) ;
}
//==================================================================
void MainWindow::initializeStringFinder(void)
{
    allPaths_          = ui_->pathSelectionLV   ;
    logViewer_         = ui_->pathInfoTB        ;
    model_             = new FileListModel(this);
    firstEditorCall_   = true                   ;
    editorTimer_       = new QTimer(this)       ;

    settingsValidator_ = new QRegExpValidator(QRegExp("[^\\s*|\\t*]*"), this);
    ui_->settingsLE->setValidator(settingsValidator_);

    this->readQSettings(QString(""));

    ui_       ->rootPathLE      ->insert        (rootPath_                          ) ;
    ui_       ->matchedFilesTE  ->viewport      (                                   )->installEventFilter(this);
    ui_       ->matchedResultsTE->viewport      (                                   )->installEventFilter(this);
    this                        ->setRootPath   (ui_->rootPathLE->text()            );
    this                        ->updateListView(                                   );
    logViewer_                  ->setSizePolicy (QSizePolicy(QSizePolicy::Preferred,
                                                             QSizePolicy::Preferred));

    connect(ui_->rootPathLE, &QLineEdit    ::editingFinished,
            this           , &MainWindow   ::updateListView  );
    connect(ui_->rootPathLE, &QLineEdit    ::editingFinished,
            logViewer_     , &QTextEdit    ::clear           );
    connect(model_         , &FileListModel::numberPopulated,
            this           , &MainWindow   ::updateLog       );
    connect(allPaths_      , &QListView    ::doubleClicked  ,
            this           , &MainWindow   ::reactToClick    );
    connect(editorTimer_   , SIGNAL        (timeout    ())  ,
            this           , SLOT          (checkEditor())   );
}
//==================================================================
void MainWindow::checkEditor(void)
{
    char buf[4096];
    FILE *cmd_pipe = popen("pgrep -f '/Applications/nedit-5.5-Darwin-i386/nedit -server'", "r");

    fgets(buf, 4096, cmd_pipe);
    pid_t pid = strtoul(buf, NULL, 10);

    if( pid == 0 ) {firstEditorCall_ = true ;}

    pclose( cmd_pipe );
}

//==================================================================
QString MainWindow::selectSettings(QString id)
{
    ui_->settingsCB->clear() ;

    QSettings   allSettings(qsettingPath_+QString("allSettings.txt"), QSettings::NativeFormat);
    QFile       sFile      (allSettings.fileName()                                           );

    QString     settingsList = allSettings .value("settingsList" , ""                     ).toString();
    QString     lastSettings = allSettings .value("lastSettings" , "INFN"                 ).toString();
    QStringList theSettings  = settingsList.split(QRegExp("\\s+"), QString::SkipEmptyParts) ;

    if( !sFile.exists())
    {
        ui_->settingsCB->insertItem    (1,  QString("default"),QVariant(QString("default"))) ;
        ui_->settingsCB->setCurrentText(    QString("default")                             ) ;
    }

    if( id.contains(QRegularExpression("\\w+")))
    {
        lastSettings = id ;
    }
    if( theSettings.size() == 0 )
    {
        theSettings << "default" ;
        lastSettings = "default" ;
    }
    for(int i=0; i<theSettings.size(); ++i)
    {
        bool alreadyThere = false ;
        for(int j=0; j<ui_->settingsCB->count(); ++j)
        {
            if( ui_->settingsCB->itemData(j).toString() == theSettings.at(i))
            {
                alreadyThere = true ;
            }
        }
        if (!alreadyThere )
        {
            ui_->settingsCB->insertItem(i,theSettings.at(i),QVariant(theSettings.at(i))) ;
        }
    }

    ui_->settingsCB->setCurrentText(lastSettings);

    return qsettingPath_+ lastSettings + QString(".txt");
}
    //==================================================================
void MainWindow::readQSettings(QString id)
{
    char currentDirectory[4096];

    QString selectedSettingsFile = this->selectSettings(id) ;

    QSettings chosenSettings(selectedSettingsFile, QSettings::NativeFormat);

    QString   currentDir     = QString             (getcwd(currentDirectory, sizeof(currentDirectory)))           ;
              rootPath_      = chosenSettings.value("rootPath"             , currentDir               ).toString();
    QString   selectedPaths  = chosenSettings.value("selectedPaths"        , ""                       ).toString();
              selectedPaths_ = selectedPaths.split ("\n"                   , QString::SkipEmptyParts  )           ;

    if( HOME_.size() > 0                     ) {currentDir = HOME_      ;}
    if( !rootPath_.contains(QRegExp("\\w+")) ) {rootPath_  = currentDir ;}

    ui_->matchPathsTE                     ->clear() ;
    ui_->searchStringsTE                  ->clear() ;
    ui_->excludePathsTE                   ->clear() ;

    if( ui_->pathSelectionLV->selectionModel() != NULL )
    {
        ui_->pathSelectionLV->selectionModel()->clear() ;
        this->updateLog(0) ;
    }

    ui_->matchPathsTE            ->setText       (chosenSettings.value("matchPaths"            , ""     ).toString()) ;
    ui_->searchStringsTE         ->setText       (chosenSettings.value("searchStrings"         , "::"   ).toString()) ;
    ui_->excludePathsTE          ->setText       (chosenSettings.value("excludePaths"          , ""     ).toString()) ;
    ui_->suffixesTE              ->setText       (chosenSettings.value("suffixes"              , "cpp h").toString()) ;
    ui_->searchStringsLogicCB    ->setCurrentText(chosenSettings.value("searchStringsLogic"    , "or"   ).toString()) ;
    ui_->caseSensitiveStringCB   ->setChecked    (chosenSettings.value("caseSensitiveString"   , 0      ).toInt   ()) ;
    ui_->excludeStringsLogicCB   ->setCurrentText(chosenSettings.value("excludeStringsLogic"   , "or"   ).toString()) ;
    ui_->excludeStringsTE        ->setText       (chosenSettings.value("excludeStringsTE"      , "or"   ).toString()) ;
    ui_->caseSensitiveEStringCB  ->setChecked    (chosenSettings.value("caseSensitiveEString"  , 0      ).toInt   ()) ;
    ui_->matchPathsLogicCB       ->setCurrentText(chosenSettings.value("matchPathsLogic"       , "or"   ).toString()) ;
    ui_->caseSensitiveMatchCB    ->setChecked    (chosenSettings.value("caseSensitiveMatch"    , 0      ).toInt   ()) ;
    ui_->excludePathsLogicCB     ->setCurrentText(chosenSettings.value("excludePathsLogic"     , "or"   ).toString()) ;
    ui_->caseSensitiveExclusionCB->setChecked    (chosenSettings.value("caseSensitiveExclusion", 0      ).toInt   ()) ;

    this->on_searchStringsTE_textChanged() ;
}
//===========================================================================
void MainWindow::startEditorProcess(QString file, int lineNumber)
{
    processMapDef::iterator pIt ;
    QStringList  arguments      ;
    stringstream ss             ;

    QString flag          = QString("second") ;
    if( firstEditorCall_ )
    {
        firstEditorCall_ = false ;
        flag             = QString("first") ;
    }
    QString      script = QString("/Users/menasce/AnalysisTBF/Monicelli/finder/startNedit.pl");
    ss        << lineNumber                                ;
    arguments << flag << file << QString(ss.str().c_str()) ;

    QString pID = file + QString("-") + QString(ss.str().c_str())        ;
    pIt         = startEditor_.find(pID)                                 ;
    if( pIt    == startEditor_.end() ) startEditor_[pID] = new QProcess();
    startEditor_[pID]->start(script,arguments);
    if( !editorTimer_->isActive())
    {
        editorTimer_->start(1000) ;
    }
    startEditor_[pID]->waitForStarted(3000)       ;
    startEditor_[pID]->waitForReadyRead(3000)     ;

    QByteArray result = startEditor_[pID]->readAllStandardOutput();
    QByteArray error  = startEditor_[pID]->readAllStandardError ();

}

//===========================================================================
void MainWindow::editFile(void)
{
    QTextCursor textCursor = ui_->matchedResultsTE->textCursor() ;
    int         tc         = textCursor.blockNumber() ;
    QTextBlock  textBlock  = ui_->matchedResultsTE->document()->findBlockByNumber(tc) ;
    QStringList parts      = textBlock.text().split(QRegExp("^\\d+\\]"), QString::SkipEmptyParts);
    QString     candidate  = parts.at(0);
                candidate  = candidate.replace(QString(" "),QString("")) ;
    int         lineNumber = 0 ;

    QFile candidateFile(candidate) ;
    if( candidateFile.exists() )
    {
        lineNumber = 1 ;
    }
    else
    {
        QStringList ln  = textBlock.text().split(QRegExp("\\]"), QString::SkipEmptyParts);
        lineNumber      = ln.at(0).toInt() ;
        for(int pBlockN = tc-1; pBlockN > 0; --pBlockN)
        {
            textBlock      = ui_->matchedResultsTE->document()->findBlockByNumber(pBlockN-1) ;
            parts          = textBlock.text().split(QRegExp("^\\d+\\]"), QString::SkipEmptyParts);
            candidate      = parts.at(0);
            candidate      = candidate.replace(QString(" "),QString("")) ;
            QFile candidateFile(candidate) ;
            if( candidateFile.exists() ){break ;}
        }
    }
    this->startEditorProcess(candidate,lineNumber);
}

//===========================================================================
bool MainWindow::eventFilter(QObject *obj, QEvent * event)
{
  if      (event->type() == QEvent::Resize && obj == this)
  {

  }
  else if ((obj           == ui_->matchedResultsTE              ||
            obj           == ui_->matchedResultsTE->viewport()) &&
            event->type() == QMouseEvent::MouseButtonDblClick  )
  {
      this->editFile();
  }
  else if ((obj           == ui_->matchedFilesTE                ||
            obj           == ui_->matchedFilesTE->viewport())   &&
            event->type() == QMouseEvent::MouseButtonDblClick  )
  {
      QTextCursor textCursor = ui_->matchedFilesTE->textCursor() ;
      int         tc         = textCursor.blockNumber() ;
      QTextBlock  textBlock  = ui_->matchedFilesTE->document()->findBlockByNumber(tc) ;

      QMouseEvent *mouseEvent = static_cast<QMouseEvent*>(event);

      QTextCharFormat fmt;
      fmt.setBackground(Qt::yellow);

      QTextCursor cursor = ui_->matchedFilesTE->cursorForPosition(QPoint(mouseEvent->x(),mouseEvent->y()));

      QList<QTextEdit::ExtraSelection> extraSelections;

      QTextEdit::ExtraSelection selection;

      selection.format.setBackground(QColor(Qt::gray).lighter(80)         );
      selection.format.setProperty  (QTextFormat::FullWidthSelection, true);
      selection.cursor = cursor;
      selection.cursor.clearSelection();
      extraSelections.append(selection);

      ui_->matchedFilesTE->setExtraSelections(extraSelections);

      QStringList sourceElements ;
      QStringList destinElements ;
                  sourceElements = ui_->matchedFilesTE  ->toPlainText().split('\n', QString::SkipEmptyParts);
                  destinElements = ui_->matchedResultsTE->toPlainText().split('\n', QString::SkipEmptyParts);
      QString     allText        = ui_->matchedFilesTE  ->toPlainText() ;

    // Find double-clicked line number (newLine) first
      int line = 1 ;
      for(int i=0; i<ui_->matchedFilesTE->toPlainText().size(); ++i)
      {
          if( allText.at(i).toLatin1() == '\n' ) {line++ ;}
          if( i > cursor.position()            ) {break  ;}
      }

      int newLine = 1 ;
      for(int i=0; i<destinElements.size(); ++i)
      {
          if( sourceElements.at(line-1) == destinElements.at(i)) {break;}
          newLine++ ;
      }

//      QTextBlock  textBlock  = ui_->matchedResultsTE->document()->findBlockByLineNumber(newLine-1);
//      QTextCursor textCursor = ui_->matchedResultsTE->textCursor ();
      textBlock  = ui_->matchedResultsTE->document()->findBlockByLineNumber(newLine-1);
      textCursor = ui_->matchedResultsTE->textCursor ();
      textCursor.setPosition (textBlock.position());
      selection.cursor = textCursor;
      selection.cursor.clearSelection();
      extraSelections.append(selection);
      ui_->matchedResultsTE->setExtraSelections(extraSelections);
      if(newLine>2) for(int i=0; i<11; ++i ) textCursor.movePosition(QTextCursor::Down) ;
      ui_->matchedResultsTE->setTextCursor(textCursor);
    }
    return QWidget::eventFilter(obj, event);
}

//===========================================================================
void MainWindow::updateLog(int number)
{
    logViewer_->clear() ;
    logViewer_->append(tr("Searching into %1 sub-directories.").arg(number-2));

    QStringList elements = model_->getList() ;
    for(int i=0; i<elements.size(); ++i)
    {
     for(int j=0; j<selectedPaths_.size(); ++j)
     {
         if( elements.at(i) == selectedPaths_.at(j) )
         {
             allPaths_->selectionModel()->select( model_->index(i), QItemSelectionModel::Select );
         }
     }
    }
    allPaths_->setFocus();
}
//===========================================================================
void MainWindow::updateListView(void)
{
 rootPath_ = ui_->rootPathLE->text() ;
 model_   ->setDirPath        (rootPath_) ;
 allPaths_->setModel          (model_   ) ;
 ui_      ->rootPathLE->clear (         ) ;
 ui_      ->rootPathLE->insert(rootPath_) ;

}

//===========================================================================
void MainWindow::reactToClick(const QModelIndex &index)
{
 if( index.data().toString() == ".." ||
     index.data().toString() == "."    )
 {
  QStringList list        ;
  QString     newPath = "";
  list = rootPath_.split('/', QString::SkipEmptyParts) ;
  for(int i=0; i<list.size()-1; ++i)
  {
   newPath += QString("/") + list.at(i) ;
  }
  newPath  += QString("/") ;
  rootPath_ = newPath ;
 }
 else
 {
  rootPath_ += index.data().toString() + QString("/");
 }

 ui_ ->rootPathLE->setText(rootPath_);

 this->updateListView() ;
}
//===========================================================================
QString MainWindow::getSelectedPaths()
{
    QString         selectedPaths = ""                    ;
    QModelIndexList selectedItems = ui_->pathSelectionLV->selectionModel()->selectedIndexes() ;

    foreach(QModelIndex index, selectedItems)
    {
        selectedPaths += index.data().toString()+ QString("\n");
    }
    return selectedPaths ;
}

//===========================================================================
void MainWindow::on_findPB_clicked()
{
    QString       selectedPaths  = this->getSelectedPaths() ;

    QString       script         = "/Users/menasce/AnalysisTBF/Monicelli/finder/trova.pl" ;
    QString       root           = ui_->rootPathLE      ->text()                          ;
    QString       matchPaths     = ui_->matchPathsTE    ->toPlainText()                   ;
    QString       excludePaths   = ui_->excludePathsTE  ->toPlainText()                   ;
    QString       searchStrings  = ui_->searchStringsTE ->toPlainText()                   ;
    QString       excludeStrings = ui_->excludeStringsTE->toPlainText()                   ;
    QString       suffixesAll    = ui_->suffixesTE      ->toPlainText()                   ;
    QStringList   selectedP      = selectedPaths .split('\n', QString::SkipEmptyParts)    ;
    QStringList   matchP         = matchPaths    .split('\n', QString::SkipEmptyParts)    ;
    QStringList   excludedP      = excludePaths  .split('\n', QString::SkipEmptyParts)    ;
    QStringList   searchS        = searchStrings .split('\n', QString::SkipEmptyParts)    ;
    QStringList   excludedS      = excludeStrings.split('\n', QString::SkipEmptyParts)    ;
    QStringList   suffixes       = suffixesAll   .split('\n', QString::SkipEmptyParts)    ;
    QStringList   arguments                                                               ;
    QString       parts    = "\""                                                         ;
    QProcess    * process  = new QProcess(this)                                           ;

    arguments << QString("--html") ;
    arguments << QString("--ps") ;

    if( selectedP.size() == 0 )
    {
        parts = root ;
    }
    else
    {
        for(int i=0; i< selectedP.size(); ++i)
        {
            parts += root + selectedP.at(i) ;
            if( i != selectedP.size()-1) parts += QString(" " ) ;
        }
        parts += "\"" ;
    }

    arguments << parts ;

    if( matchP.size() > 0 )
    {
        parts = "\"" ;
        arguments << QString("--mp") ;
        for(int i=0; i< matchP.size(); ++i)
        {
            parts += matchP.at(i) ;
            if( i != matchP.size()-1) parts += QString(" " ) ;
        }
        parts += "\"" ;
        arguments << parts ;
    }

    if( suffixes.size() > 0 )
    {
        parts = "\"" ;
        arguments << QString("--su") ;
        for(int i=0; i< suffixes.size(); ++i)
        {
            parts += suffixes.at(i) ;
            if( i != suffixes.size()-1) parts += QString(" " ) ;
        }
        parts += "\"" ;
        arguments << parts ;
    }

    arguments << "--ml" << ui_->matchPathsLogicCB           ->currentText() ;
    arguments << "--pl" << ui_->excludePathsLogicCB         ->currentText() ;
    arguments << "--sl" << ui_->searchStringsLogicCB        ->currentText() ;
    arguments << "--mh" << ui_->maxTotalFilesFoundLE        ->text()        ;
    arguments << "--mc" << ui_->maxTotalFilesConsideredLE   ->text()        ;
    arguments << "--mt" << ui_->maxTotalFileMatchesFoundLE  ->text()        ;
    arguments << "--mz" << ui_->maxTotalStringMatchesFoundLE->text()        ;
    arguments << "--el" << ui_->excludeStringsLogicCB       ->currentText() ;

    if( ui_->caseSensitiveMatchCB    ->isChecked()) {arguments << "--cm" << "true"  ;}
    else                                            {arguments << "--cm" << "false" ;}
    if( ui_->caseSensitiveExclusionCB->isChecked()) {arguments << "--em" << "true"  ;}
    else                                            {arguments << "--em" << "false" ;}
    if( ui_->caseSensitiveStringCB   ->isChecked()) {arguments << "--cs" << "true"  ;}
    else                                            {arguments << "--cs" << "false" ;}
    if( ui_->caseSensitiveEStringCB  ->isChecked()) {arguments << "--es" << "true"  ;}
    else                                            {arguments << "--es" << "false" ;}

    if( excludedP.size() > 0 )
    {
        parts = "\"" ;
        arguments << QString("--ep") ;
        for(int i=0; i< excludedP.size(); ++i)
        {
            parts += excludedP.at(i) ;
            if( i != excludedP.size()-1) parts += QString(" " ) ;
        }
        parts += "\"" ;
        arguments << parts ;
    }

    if( searchS.size() > 0 )
    {
        parts = "\"" ;
        arguments << QString("--ss") ;
        for(int i=0; i< searchS.size(); ++i)
        {
            parts += searchS.at(i) ;
            if( i != searchS.size()-1) parts += QString(" " ) ;
        }
        parts += "\"" ;
        arguments << parts ;
    }

    if( excludedS.size() > 0 )
    {
        parts = "\"" ;
        arguments << QString("--xs") ;
        for(int i=0; i< excludedS.size(); ++i)
        {
            parts += excludedS.at(i) ;
            if( i != excludedS.size()-1) parts += QString(" " ) ;
        }
        parts += "\"" ;
        arguments << parts ;
    }

    process->start(script,arguments) ;
    stringstream ss ;
    ss   << script.toStdString()
         << " "
         << arguments.join(" ").toStdString() ;
    QString cmd = QString(ss.str().c_str()) ;
    cmd.replace(QRegExp("--html"),"") ;
    ui_->commandLineTE->setText(cmd) ;
    cout << __LINE__ << "] " << ss.str() << endl ;

    process->waitForFinished() ;

    QByteArray result = process->readAllStandardOutput();
    QByteArray error  = process->readAllStandardError ();

    QString results = QString(result.data()) ;
    QString errors  = QString(error .data()) ;

    this->dispatchResults(results, errors) ;
}
//===========================================================================
void MainWindow::dispatchResults(QString & results, QString & errors)
{
    ui_->errorsTE->clear() ;
    ui_->errorsTE->setText(errors) ;

    QStringList             linesR = results.split("\n", QString::SkipEmptyParts) ;
    QRegularExpression      regexFile("\\[FileMatch\\]\\s+(.*)"              ) ;
    QRegularExpression      regexText("\\[stringMatch\\]\\s+(.*)"            ) ;
    QRegularExpression      regexTFF ("\\[TotalFilesFound\\]\\s+(.*)"        ) ;
    QRegularExpression      regexTFC ("\\[TotalFilesConsidered\\]\\s+(.*)"   ) ;
    QRegularExpression      regexTFMF("\\[TotalFileMatchesFound\\]\\s+(.*)"  ) ;
    QRegularExpression      regexTSMF("\\[TotalStringMatchesFound\\]\\s+(.*)") ;
    QRegularExpression      regexPerl("\\[perl\\]\\s+(.*)"                   ) ;
    QRegularExpression      regexFind("\\[finder\\]\\s+(.*)"                 ) ;
    QRegularExpressionMatch match ;

    ui_->matchedFilesTE  ->clear();
    ui_->matchedResultsTE->clear();

    for( int l=0; l<linesR.size(); ++l)
    {
//        cout << __LINE__ << "] " << linesR.at(l).toStdString() << endl ;
        match  = regexFind.match(linesR.at(l)); // Intercept this programs's messages
        if (match.hasMatch())
        {
          cout << __LINE__ << "] "
               << match.captured(1).toStdString() << " "
               << endl ;
        }

        match  = regexPerl.match(linesR.at(l)); // Intercept perl messages
        if (match.hasMatch())
        {
          cout << __LINE__ << "] "
               << match.captured(1).toStdString() << " "
               << endl ;
        }

        QString     msg ;
        QTextCursor fiCursor = ui_->matchedFilesTE  ->textCursor ();
        QTextCursor reCursor = ui_->matchedResultsTE->textCursor ();
                    match    = regexFile.match(linesR.at(l));
        if (match.hasMatch())
        {
            msg = match.captured(1) ;
            fiCursor.insertHtml(msg) ;
            fiCursor.insertBlock() ;
            reCursor.insertHtml(QString("<font color=\"yellow\" wheight=\"bold\">_________________________________________________________________________________________</font>")) ;
            reCursor.insertBlock() ;
            reCursor.insertHtml(QString("<pre>") + msg) ;
            reCursor.insertBlock() ;
        }
        match = regexText.match(linesR.at(l));
        if (match.hasMatch())
        {
            msg = match.captured(1) ;
            reCursor.insertHtml(QString("<pre>") + msg) ;
            reCursor.insertBlock()    ;
        }
        match = regexTFF .match(linesR.at(l));
        if (match.hasMatch()) {ui_->totalFilesFoundLE        ->setText(match.captured(1));}
        match = regexTFC .match(linesR.at(l));
        if (match.hasMatch()) {ui_->totalFilesConsideredLE   ->setText(match.captured(1));}
        match = regexTFMF.match(linesR.at(l));
        if (match.hasMatch()) {ui_->totalFileMatchesFoundLE  ->setText(match.captured(1));}
        match = regexTSMF.match(linesR.at(l));
        if (match.hasMatch()) {ui_->totalStringMatchesFoundLE->setText(match.captured(1));}

    }
}

//===========================================================================
void MainWindow::on_matchPathsCB_clicked()
{
    ui_->matchPathsTE->clear() ;
}
//===========================================================================
void MainWindow::on_searchStringsCB_clicked()
{
    ui_->searchStringsTE->clear() ;
}
//===========================================================================
void MainWindow::on_excludeStringsCB_clicked()
{
    ui_->excludeStringsTE->clear() ;
}
//===========================================================================
void MainWindow::on_excludePathsCB_clicked()
{
    ui_->excludePathsTE->clear() ;
}
//===========================================================================
void MainWindow::on_restoreCB_clicked()
{
    this->readQSettings(QString("")) ;
}
//===========================================================================
void MainWindow::on_clearPathSelectionPB_clicked()
{
    ui_->pathSelectionLV->selectionModel()->clear() ;
}
//===========================================================================
void MainWindow::on_searchStringsTE_textChanged()
{
    this->enableLogicCB(ui_->searchStringsLogicCB,ui_->searchStringsTE);
}
//===========================================================================
void MainWindow::on_matchPathsTE_textChanged()
{
    this->enableLogicCB(ui_->matchPathsLogicCB,ui_->matchPathsTE);
}
//===========================================================================
void MainWindow::on_excludePathsTE_textChanged()
{
    this->enableLogicCB(ui_->excludePathsLogicCB,ui_->excludePathsTE);
}
//===========================================================================
void MainWindow::on_excludeStringsTE_textChanged()
{
    this->enableLogicCB(ui_->excludeStringsLogicCB,ui_->excludeStringsTE);
}
//===========================================================================
void MainWindow::enableLogicCB(QComboBox * theCombo, QTextEdit * theTextEdit)
{
    QString content = theTextEdit->toPlainText() ;
    QStringList all = content.split("\n", QString::SkipEmptyParts) ;
    if( all.size() > 1)
    {
        theCombo->setEnabled    (true );
    }
    else
    {
        theCombo->setEnabled    (false);
        theCombo->setCurrentText("or" );
    }
}
//===========================================================================
void MainWindow::on_addSettingsPB_clicked()
{
    int lastOne = ui_->settingsCB->count() ;
    for(int i=0; i<lastOne; ++i)
    {
        cout << __LINE__ << "] [finder] item: " << i << " " << ui_->settingsCB->itemData(i).toString().toStdString() << endl ;
        if( ui_->settingsCB->itemData(i).toString() == ui_->settingsLE->text() )
        {
            ui_->settingsLE->clear() ;
            return ;
        }
    }
    ui_->settingsCB->insertItem(lastOne,ui_->settingsLE->text(),QVariant(ui_->settingsLE->text())) ;
    ui_->settingsCB->setCurrentIndex(lastOne);
    ui_->settingsLE->clear() ;
}
//===========================================================================
void MainWindow::on_settingsLE_editingFinished()
{
    this->on_addSettingsPB_clicked() ;
}
//===========================================================================
void MainWindow::on_clearAllSettingsCB_clicked()
{
    this->on_matchPathsCB_clicked    () ;
    this->on_searchStringsCB_clicked () ;
    this->on_excludeStringsCB_clicked() ;
    this->on_excludePathsCB_clicked  () ;

    ui_->pathSelectionLV->selectionModel()->clear() ;
}
//===========================================================================
void MainWindow::on_restrictClearCB_clicked()
{
    ui_->suffixesTE->clear() ;
}
//===========================================================================
void MainWindow::on_saveSettingsPB_clicked()
{
    this->closeEvent(NULL) ;
}
//===========================================================================
void MainWindow::on_loadSettingsPB_clicked()
{
    this->readQSettings(ui_->settingsCB->currentText());
}

//===========================================================================
void MainWindow::on_testPB_clicked()
{
    firstEditorCall_ = true ;
}

void MainWindow::on_synchronizeCB_clicked(bool checked)
{
    if( checked )
    {
        connect   (ui_->lPanelTE->verticalScrollBar()  , SIGNAL(valueChanged(int)),
                   ui_->rPanelTE->verticalScrollBar()  , SLOT  (setValue    (int)));
        connect   (ui_->lPanelTE->horizontalScrollBar(), SIGNAL(valueChanged(int)),
                   ui_->rPanelTE->horizontalScrollBar(), SLOT  (setValue    (int)));
    }
    else
    {
        disconnect(ui_->lPanelTE->verticalScrollBar()  ,  SIGNAL(valueChanged(int)),
                   ui_->rPanelTE->verticalScrollBar()  , SLOT  (setValue    (int)));
        disconnect(ui_->lPanelTE->horizontalScrollBar(), SIGNAL(valueChanged(int)),
                   ui_->rPanelTE->horizontalScrollBar(), SLOT  (setValue    (int)));
    }
}
